version: '3.8'

services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - skillup-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Backend API Service
  skillup-backend:
    build:
      context: ..
      dockerfile: Dockerfile
    ports:
      - "${PORT:-5000}:5000"
    env_file:
      - ../.env
    environment:
      # Application Configuration
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=5000
      
      # AI Service Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Database Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DATABASE_URL=${DATABASE_URL}
      
      # Optional: Database pooled connection
      - DATABASE_POOLED_URL=${DATABASE_POOLED_URL}
      
      # Redis Configuration
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_KEY_PREFIX=${REDIS_KEY_PREFIX:-skillup:}
      - REDIS_DEFAULT_TTL=${REDIS_DEFAULT_TTL:-3600}
      - REDIS_COURSE_TTL=${REDIS_COURSE_TTL:-3600}
    
    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 5000, path: '/health/db', timeout: 2000 }; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Restart policy
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Networking
    networks:
      - skillup-network
    depends_on:
      - redis

volumes:
  redis_data:

networks:
  skillup-network:
    driver: bridge

# Optional: For local development with file watching
# Uncomment the development profile below for local development
---
version: '3.8'

services:
  # Redis for Development
  redis-dev:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    networks:
      - skillup-network
    restart: unless-stopped

  # Development Backend Service
  skillup-backend-dev:
    build:
      context: ..
      dockerfile: Dockerfile
      target: builder
    ports:
      - "${PORT:-5000}:5000"
    env_file:
      - ../.env
    environment:
      - NODE_ENV=development
      - PORT=5000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_POOLED_URL=${DATABASE_POOLED_URL}
      - REDIS_URL=${REDIS_URL:-redis://redis-dev:6379}
      - REDIS_KEY_PREFIX=${REDIS_KEY_PREFIX:-skillup:dev:}
      - REDIS_DEFAULT_TTL=${REDIS_DEFAULT_TTL:-1800}
      - REDIS_COURSE_TTL=${REDIS_COURSE_TTL:-1800}
    
    # Mount source code for development
    volumes:
      - .:/app
      - /app/node_modules
    
    # Override command for development
    command: npm run dev
    
    # Enable file watching
    develop:
      watch:
        - action: sync
          path: ./src
          target: /app/src
        - action: sync
          path: ./index.ts
          target: /app/index.ts
        - action: rebuild
          path: package.json
    
    restart: unless-stopped
    networks:
      - skillup-network
    depends_on:
      - redis-dev

volumes:
  redis_dev_data:

networks:
  skillup-network:
    driver: bridge

profiles:
  - development 